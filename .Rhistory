from scipy.stats import trim_mean
numbers = [1, 2, 2, 3, 4, 100]
tm = trim_mean(numbers, 0.1)
print("tm :", tm)
from scipy.stats import hmean
numbers = [2, 4, 4]
hm = hmean(numbers)
print("hmean:", hm)
import statistics
numbers = [2, 4, 4]
hm = statistics.harmonic_mean(numbers)
print("hm :", hm)
from scipy.stats import gmean
numbers = [2, 8, 4]
gm = gmean(numbers)
print("gmean:", gm)
import statistics
numbers = [2, 8, 4]
gm = statistics.geometric_mean(numbers)
print("geometric_mean:", gm)
group_means = df.groupby("Class").mean(numeric_only=True)
print(group_means)
df["Individual Mean"] = df.mean(numeric_only=True, axis=1)
print(df)
import statistics
numbers = [10, 20, 30, 40, 50]
mean_value = statistics.mean(numbers)
print("Mean:", mean_value)
import numpy as np
numbers = [10, 20, 30, 40, 50]
mean_value = np.mean(numbers)
print("Mean:", mean_value)
import pandas as pd
data = {
"Name":["Sevda", "MG", "Reza", "RG"],
"Math":[20, 12, 18, 15],
"Statistics": [17, 16, 19, 14]
}
df = pd.DataFrame(data)
mean_math = df["Math"].mean()
print("Math:", mean_math)
means = df.mean(numeric_only=True)
print(means)
df["Individual Mean"] = df.mean(numeric_only=True, axis=1)
print(df)
import pandas as pd
import numpy as np
data = {
"Name":["Sevda", "MG", "Reza", "RG"],
"Math":[20, 12, np.nan, 15],
"Statistics": [17, 16, 19, np.nan]
}
df = pd.DataFrame(data)
mean_math = df["Math"].mean()
mean_Statistics = df["Statistics"].mean()
print("Math:", mean_math)
print("Statistics:", mean_Statistics)
means = df.mean(numeric_only=True)
print(means)
import numpy as np
numbers = [10, 20, np.nan, 30, 40]
mean_value = np.nanmean(numbers)
print(" Mean:", mean_value)
import pandas as pd
import numpy as np
data = {
"Name":["Sevda", "MG", "Reza", "RG", "SG"],
"Class":["A", "B", "C", "A", "C"],
"Math":[12, 18, 15, np.nan, 20],
"physics": [17, 16, 19, 14, np.nan],
"Psychology": [np.nan, 18, 13, 15, 19]
}
df = pd.DataFrame(data)
print(df)
means = df.mean(numeric_only=True)
print(means)
df["Individual Mean"] = df.mean(numeric_only=True, axis=1)
print(df)
group_means = df.groupby("Class").mean(numeric_only=True)
print(group_means)
import statistics
numbers = [2, 8, 4]
gm = statistics.geometric_mean(numbers)
print("geometric_mean:", gm)
x <- c(12, 15, 18, 25, 30, 35)
range_value <- max(x) - min(x)
range_value
x <- c(12, 15, 18, 25, 30, 35)
range(x)
x <- c(10, 15, NA, 25, 30, NA, 40)
range(x, na.rm = TRUE)
df <- data.frame(
A = c(10, 15, 20, 25, 30),
B = c(5, 7, 9, 12, 15),
C = c(100, 120, 110, 130, 125),
Gender = c("m", "f", "f", "m", "f")
)
df
range_df <- sapply(df[, sapply(df, is.numeric)], function(x) max(x) - min(x))
range_df
aggregate(cbind(A, B, C) ~ Gender, data = df,
FUN = function(x) max(x) - min(x))
df <- data.frame(
A = c(10, 15, 20, 25, 30),
B = c(5, NA, 9, 12, 15),
C = c(100, 120, 110, 130, NA),
Gender = c("m", "f", "f", "m", "f")
)
df
aggregate(cbind(A, B, C) ~ Gender, data = df,
FUN = function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
df <- data.frame(
A = c(10, 15, 20, 25, 30),
B = c(5, NA, 9, 12, 15),
C = c(100, 120, 110, 130, NA),
Gender = c("m", "f", "f", "m", "f")
)
df
aggregate(cbind(A, B, C) ~ Gender, data = df,
FUN = function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
reticulate::repl_python()
