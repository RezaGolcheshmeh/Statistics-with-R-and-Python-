# chapter1: Measures of central tendency

In this chapter we will learn descriptive statistics.

**Measures of Central Tendency** are statistical values that represent the *center* or *typical value* of a data set. They help us understand the overall trend or “average” behavior of the data.

## Mode in R

The mode is the value(s) that appear most frequently in the data set.

In R, the `lsr` package provides a simple and clean way to calculate the mode.

Step 1: Install and Load the `lsr` Package

```{r}
install.packages("lsr")
library(lsr)
```

**Example:**

```{r}
data <- c(1, 2, 2, 3, 3, 3, 4, 5)
modeOf(data)
```

⚠️ Important Note

There is a base R function also named `mode()` — but it returns the data type (like `"numeric"`, `"character"`) instead of calculating the statistical mode!

**Example: Mode in Data Frame**

```{r}
df <- data.frame(
  Score = c(1, 2, 2, 3, 4, 3, NA),
  Group = c("A", "B", "B", "B", "A", "A", NA),
  Age   = c(20, 22, 21, 22, 21, 22, 21)
)

sapply(df, modeOf)
```

The `sapply()` function is executed on each column of the dataframe.

## Mode in Python

Calculating the Mode in Python Using `pandas`

**Use `.mode()` to Find the Mode**

**Exaple 1:**

```{python}
import pandas as pd

data = pd.Series([1, 2, 2, 3, 4, 4, 5])
mod = data.mode()
print("Mode:", mod.tolist())

#or

print (mod)

```

**Example 2:** Create a Sample Data Frame.

Mode for All Columns:

```{python}
data = {
    'A': [1, 2, 2, 3, 4],
    'B': [5, 5, 6, 7, 7],
    'C': [10, 10, 10, 11, 12]
}

df = pd.DataFrame(data)

mode_values = df.mode()
print(mode_values)
```

**Example 3:**

Mode for All Columns:

```{python}
data = {
    "Name": ["Alice", "Bob", "Charlie", "Diana", "Eli", "Fiona"],
    "Age": [24, 30, 22, 24, 30, 24],
    "Gender": ["Female", "Male", "Male", "Female", "Male", "Female"]
}

df = pd.DataFrame(data)
df
```

Mode of the `"Age"` column:

```{python}
df["Age"].mode()
```

## Median in R

The **median** is the middle value of a dataset when the numbers are sorted in order.

-   If the number of values is **odd**, it’s the middle one.

-   If it’s **even**, it’s the average of the two middle numbers.

Basic `median()` function.

```{r}
x <- c(10, 20, 30, 40, 50)
median(x)
```

With missing values (`NA`) we can use `na.rm = TRUE`

```{r}
y <- c(5, 8, NA, 12)
median(y, na.rm =TRUE)

```

**Using `tapply` with categorical variables in R**

`tapply` lets you apply a function (like `median`) to subsets of a vector, defined by a categorical variable (factor).

```{r}
Age <- c(24, 30, 22, 24, 30, 24)
Gender <- c("F", "M", "M", "F", "M", "F")

tapply(Age, Gender, median)
```

**Explanation:**

-   **First argument** → numeric vector (`Age`)

-   **Second argument** → categorical variable (`Gender`)

-   **Third argument** → function to apply (`median`)

So this gives you the median age for each gender.

Example : DataFrame

```{r}
data <- data.frame(
  Gender = c("f", "f", "m", "m", "f", "m"),
  Anxiety = c(12, 15, NA, 20, 18, 25),
  Depression = c(30, NA, 28, 35, 40, NA)
)

data
```

**Use** `sapply , lapply`

```{r}
sapply(data[, c("Anxiety","Depression")], median, na.rm = TRUE)  #1
#or
sapply(data[sapply(data, is.numeric)], median, na.rm = TRUE)     #2

#or
lapply(data[, c("Anxiety","Depression")], median, na.rm = TRUE)  #3
```

**Use** `tapply`

```{r}
tapply(data$Anxiety, data$Gender, median, na.rm = TRUE)
tapply(data$Depression, data$Gender, median, na.rm = TRUE)
```

**Use** `aggregate`

```{r}
aggregate(cbind(Anxiety, Depression) ~ Gender, data = data, median,na.rm = TRUE)
```

## Median in Python

**1.**Using the `statistics` library

```{python}
import statistics

data = [10, 12, 15, 17, 18]
median_value = statistics.median(data)

print("Median:", median_value)
```

**2.**Using the `NumPy` library

```{python}
import numpy as np

data = [10, 12, 15, 17, 18]
median_value = np.median(data)

print("Median:", median_value)
```

**3.**Using the `Pandas`library to **DataFrame**

```{python}
import pandas as pd

data = {
    "Age": [24, 30, 22, 24, 30, 24],
    "Score": [85, 90, 78, 92, 88, 95]
}

df = pd.DataFrame(data)

print("Median Age:", df["Age"].median())
print("Median Score:", df["Score"].median())
```

**Median in data with missing values ​​(NaN)**

Sometimes data contains missing values. `Pandas` and `NumPy` can handle them easily:

```{python}
import numpy as np
import pandas as pd

data = [10, 12, np.nan, 17, 18]

# با NumPy
print("Median with NumPy:", np.nanmedian(data))

# با Pandas
s = pd.Series(data)
print("Median with Pandas:", s.median())
```

**Example :Data Frame (Numeric + Categorical)**

```{python}
import pandas as pd
import numpy as np


data = {
    "Age": [24, 30, 22, 24, 30, 24],
    "Score": [85, np.nan, 78, 92, np.nan, 95],
    "Gender": ["F", "M", "M", "F", "M", "F"]
}

df = pd.DataFrame(data)
print(df)
```

**Calculate the median for each column.**

```{python}
medians = df.median(numeric_only=True, skipna=True)
print(medians)
```

**Calculating the median by gender**

```{python}
group_medians = df.groupby("Gender").median(numeric_only=True)
print(group_medians)
```

## Mean in R

### **Arithmetic Mean in R**

In R, we use the `mean()` function to calculate the mean.

```{r}
anxiety_scores <- c(12, 15, 20, 22, 18, 30, 25, 19, 17, 50)
mean(anxiety_scores)
```

**Mean with missing data (NA) in R**

If the data contains *missing values ​​(NA)*, you must use the argument `na.rm = TRUE`

```{r}
data <- c(5, 10, NA, 20)

mean(data, na.rm = TRUE)
```

**categorical variables: `tapply`**

The researcher wants to examine the average depression scores of two groups (men and women). To do this, we use `tapply`.

```{r}
group <- c("f","f","f","m","m","m")
depression <- c(18, 22, 20, 25, 30, 28)

tapply(depression, group, mean)
```

**Calculating the mean in a Data Frame with *missing data(NA)***

A researcher collected anxiety and depression scores from psychology students. Some students did not answer some questions, and the data is incomplete.

```{r}
data <- data.frame(
  Gender = c("f", "f", "m", "m", "f", "m"),
  Anxiety = c(12, 15, NA, 20, 18, 25),
  Depression = c(30, NA, 28, 35, 40, NA)
)

data
```

**Use `lapply , sapply`**

Mean of each column “Anxiety”,”Depression” (regardless of gender)

```{r}
sapply(data[, c("Anxiety","Depression")], mean, na.rm = TRUE)  #1
#or
sapply(data[sapply(data, is.numeric)], mean, na.rm = TRUE)     #2

#or
lapply(data[, c("Anxiety","Depression")], mean, na.rm = TRUE)  #3
```

**Use** **`tapply`**

Mean anxiety and depression scores by gender

```{r}
tapply(data$Anxiety, data$Gender, mean, na.rm = TRUE)
tapply(data$Depression, data$Gender, mean, na.rm = TRUE)
```

Use **`aggregate`**

```{r}
aggregate(cbind(Anxiety, Depression) ~ Gender, data = data, mean,na.rm = TRUE)

```

### **Geometric Mean in R**

This indicator is most often used when the data is a ratio or ratio, such as growth rates, investment returns, or population changes.

**Method 1: Using the `psych` package**

```{r}
install.packages("psych")

library(psych)

numbers <- c(4, 8, 16, 32)

geometric.mean(numbers)
```

**Method 2: Using a formula (without a package)**

```{r}
numbers <- c(4, 8, 16, 32)

gm <- exp(mean(log(numbers)))

print(gm)
```

**Application of the geometric mean:**

-   **Economics**: mean annual growth rate of an investment.

-   **Medical science**: mean increase in bacterial population .

-   **Management:** mean annual sales growth percentage.

### **Harmonic Mean in R**

Harmonic mean is most often used in situations where the data is a ratio or rate (such as speed, productivity, or growth rate).

**Method 1: Using the `psych` package**

```{r}

install.packages("psych")

library(psych)

numbers <- c(2, 4, 8, 16)

harmonic.mean(numbers)
```

**Method 2: Using a formula (without a package)**

```{r}
numbers <- c(2, 4, 8, 16)

hm <- length(numbers) / sum(1 / numbers)

print(hm)
```

**Application of harmonic mean:**

-   **Physics:** Calculating the average speed when the same distance is traveled at different speeds.

-   **Economics:** Average interest rates or investment returns.

-   **Management:** Average productivity indicators in an organization.

**Important**

-   The data must be positive.

-   If the data contains zero or negative values, the harmonic mean is not defined.

-   For data with NA, you must use `na.rm=TRUE`

### **Trimmed Mean in R**

The Trimmed Mean is a version of the arithmetic mean in which a percentage of the smallest and largest data values ​​are removed to reduce the effect of outliers.

if the data contains very large or very small values, the arithmetic mean can be misleading. In these situations, we use the trimmed mean.

```{r}
numbers <- c(2, 3, 4, 5, 100)

mean(numbers)

mean(numbers, trim = 0.2)
```

-   The trim value is chosen between 0 and 0.5.

-   For example, trim=0.1 means that 10% of the data is removed from the beginning and 10% from the end.

-   Before calculation, the data is sorted in ascending order.

**Application**

-   **Social sciences:** In questionnaires when some responses are very unusual.

-   **Economics:** In calculating indices when there are outliers.

-   **Data analysis:** In data that has noise or measurement error.

## Mean in Python

### **Arithmetic Mean in Python**

**Method 1:** Using **`statistics.mean`**

```{python}
import statistics

numbers = [10, 20, 30, 40, 50]
mean_value = statistics.mean(numbers)

print("Mean:", mean_value)
```

**Method 2:** Using **`NumPy`**

```{python}
import numpy as np

numbers = [10, 20, 30, 40, 50]
mean_value = np.mean(numbers)

print("Mean:", mean_value)
```

-   **If the data is small:** use `statistics.mean`

-   **If the data is large or a matrix:** use `numpy.mean.`

**Method 3:** Using **`Pandas`**

**Example 1:** Calculating the mean of a column

```{python}
import pandas as pd

data = {
  "Name":["Sevda", "MG", "Reza", "RG"],
   "Math":[20, 12, 18, 15],
   "Statistics": [17, 16, 19, 14]
}

df = pd.DataFrame(data)

mean_math = df["Math"].mean()

print("Math:", mean_math)
```

**Example 2:** Calculating the mean of all columns

```{python}
means = df.mean(numeric_only=True)
print(means)
```

**Example 3:** Calculating the mean of each row

```{python}
df["Individual Mean"] = df.mean(numeric_only=True, axis=1)

print(df)
```

**Mean with NaN**

1.  **Using Pandas** The Pandas library ignores `NaN` values ​​by default in its statistical functions.

```{python}
import pandas as pd
import numpy as np


data = {
  "Name":["Sevda", "MG", "Reza", "RG"],
   "Math":[20, 12, np.nan, 15],
   "Statistics": [17, 16, 19, np.nan]
}

df = pd.DataFrame(data)

mean_math = df["Math"].mean()
mean_Statistics = df["Statistics"].mean()


print("Math:", mean_math)
print("Statistics:", mean_Statistics)

```

```{python}
means = df.mean(numeric_only=True)
print(means)

```

1.  **Using `NumPy`** with `np.nanmean()`

```{python}
import numpy as np

numbers = [10, 20, np.nan, 30, 40]

mean_value = np.nanmean(numbers)

print(" Mean:", mean_value)
```

**Example:** DataFrame (numeric + categorical)

```{python}
import pandas as pd
import numpy as np

data = {
    "Name":["Sevda", "MG", "Reza", "RG", "SG"],
    "Class":["A", "B", "C", "A", "C"],
    "Math":[12, 18, 15, np.nan, 20],
    "physics": [17, 16, 19, 14, np.nan],
    "Psychology": [np.nan, 18, 13, 15, 19]
}

df = pd.DataFrame(data)

print(df)
```

1.  Mean of all numeric columns

```{python}
means = df.mean(numeric_only=True)
print(means)
```

2.  Mean of each row (for each student)

```{python}
df["Individual Mean"] = df.mean(numeric_only=True, axis=1)

print(df)
```

3.  Calculate the group mean (based on categorical column)

```{python}
group_means = df.groupby("Class").mean(numeric_only=True)
print(group_means)
```

### **Geometric Mean in Python**

1.  Using `statistics.geometric_mean` (Python 3.8 and later)

```{python}
import statistics

numbers = [2, 8, 4]

gm = statistics.geometric_mean(numbers)

print("geometric_mean:", gm)
```

2.  Using **SciPy** :`scipy.stats.gmean`

```{python}
from scipy.stats import gmean

numbers = [2, 8, 4]

gm = gmean(numbers)

print("gmean:", gm)
```

```         
gmean: 4.0
```

**If a number is zero:** the total geometric mean is zero.

-   **If a number is negative:** the geometric mean is not defined (except in special cases).

### Harmonic Mean **in Python**

1.  **Using** **`statistics.harmonic_mean`** (Python 3.6 and later)

```{python}
import statistics

numbers = [2, 4, 4]

hm = statistics.harmonic_mean(numbers)

print("hm :", hm)
```

2.  Using **SciPy** :`scipy.stats.hmean`

```{python}
from scipy.stats import hmean

numbers = [2, 4, 4]

hm = hmean(numbers)

print("hmean:", hm)

```

```         
hmean: 3.0
```

-   All data must be positive. If a value is zero or negative, the harmonic mean is not defined.

-   The main application is in rates (such as average speed over equal distances).

### Trimmed Mean in Python

The trimmed mean is the same as the regular mean, except that some of the largest and smallest data (for example, the top 10% and bottom 10%) are removed and then the mean is taken.

1.  Using **SciPy** (`scipy.stats.trim_mean`)

```{python}
from scipy.stats import trim_mean

numbers = [1, 2, 2, 3, 4, 100]

tm = trim_mean(numbers, 0.1)

print("tm :", tm)
```

```{python}
tm : 18.66
```

-   **trim_mean(data, 0.1)** : Remove 10% of the data from the beginning and end

-   **trim_mean(data, 0.2)** : Remove 20% of the data
