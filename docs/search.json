[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistics with R and Python",
    "section": "",
    "text": "0.1 Descriptive statistics\nIntroduction\nThis book is designed for psychology students to become familiar with statistical concepts in the R and Python programming languages.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Statistics with R and Python</span>"
    ]
  },
  {
    "objectID": "chapter1.html",
    "href": "chapter1.html",
    "title": "2  chapter1: Measures of central tendency",
    "section": "",
    "text": "2.1 Mode in R\nIn this chapter we will learn descriptive statistics.\nMeasures of Central Tendency are statistical values that represent the center or typical value of a data set. They help us understand the overall trend or “average” behavior of the data.\nThe mode is the value(s) that appear most frequently in the data set.\nIn R, the lsr package provides a simple and clean way to calculate the mode.\nStep 1: Install and Load the lsr Package\ninstall.packages(\"lsr\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.5'\n(as 'lib' is unspecified)\n\nlibrary(lsr)\nExample:\ndata &lt;- c(1, 2, 2, 3, 3, 3, 4, 5)\nmodeOf(data)\n\n[1] 3\n⚠️ Important Note\nThere is a base R function also named mode() — but it returns the data type (like \"numeric\", \"character\") instead of calculating the statistical mode!\nExample: Mode in Data Frame\ndf &lt;- data.frame(\n  Score = c(1, 2, 2, 3, 4, 3, NA),\n  Group = c(\"A\", \"B\", \"B\", \"B\", \"A\", \"A\", NA),\n  Age   = c(20, 22, 21, 22, 21, 22, 21)\n)\n\nsapply(df, modeOf)\n\n     Score Group Age \n[1,] \"2\"   \"A\"   \"22\"\n[2,] \"3\"   \"B\"   \"21\"\nThe sapply() function is executed on each column of the dataframe.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "chapter2.html",
    "href": "chapter2.html",
    "title": "3  chapter2: Measures of variability",
    "section": "",
    "text": "3.1 Range in R\nVariability is most commonly measured with the following descriptive statistics:\nTo calculate the range, simply subtract the largest data value from the smallest value.\nx &lt;- c(12, 15, 18, 25, 30, 35)\n\nrange_value &lt;- max(x) - min(x)\nrange_value\n\n[1] 23\nUsing range() function\nx &lt;- c(12, 15, 18, 25, 30, 35)\nrange(x)\n\n[1] 12 35\nUsing range() function with NA\nx &lt;- c(10, 15, NA, 25, 30, NA, 40)\n\nrange(x, na.rm = TRUE)\n\n[1] 10 40\nRange in DataFrame\ndf &lt;- data.frame(\n  A = c(10, 15, 20, 25, 30),\n  B = c(5, 7, 9, 12, 15),\n  C = c(100, 120, 110, 130, 125),\n  Gender = c(\"m\", \"f\", \"f\", \"m\", \"f\")\n)\n\ndf\n\n   A  B   C Gender\n1 10  5 100      m\n2 15  7 120      f\n3 20  9 110      f\n4 25 12 130      m\n5 30 15 125      f\nUsing: sapply Numeric column\nrange_df &lt;- sapply(df[, sapply(df, is.numeric)], function(x) max(x) - min(x))\nrange_df\n\n A  B  C \n20 10 30\naggregate() Categorical variables\naggregate(cbind(A, B, C) ~ Gender, data = df,\n          FUN = function(x) max(x) - min(x))\n\n  Gender  A B  C\n1      f 15 8 15\n2      m 15 7 30\nRange in DataFrame with NA\ndf &lt;- data.frame(\n  A = c(10, 15, 20, 25, 30),\n  B = c(5, NA, 9, 12, 15),\n  C = c(100, 120, 110, 130, NA),\n  Gender = c(\"m\", \"f\", \"f\", \"m\", \"f\")\n)\n\ndf\n\n   A  B   C Gender\n1 10  5 100      m\n2 15 NA 120      f\n3 20  9 110      f\n4 25 12 130      m\n5 30 15  NA      f\nIn R, to handle missing data we need to put na.rm = TRUE inside the function:\naggregate(cbind(A, B, C) ~ Gender, data = df,\n          FUN = function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n\n  Gender  A B  C\n1      f  0 0  0\n2      m 15 7 30",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>chapter2: Measures of variability</span>"
    ]
  },
  {
    "objectID": "chapter1.html#measures-of-central-tendency",
    "href": "chapter1.html#measures-of-central-tendency",
    "title": "2  chapter1: Descriptive statistics",
    "section": "",
    "text": "2.1.1 Mode in R\nThe mode is the value(s) that appear most frequently in the data set.\nIn R, the lsr package provides a simple and clean way to calculate the mode.\nStep 1: Install and Load the lsr Package\n\ninstall.packages(\"lsr\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.5'\n(as 'lib' is unspecified)\n\nlibrary(lsr)\n\nExample:\n\ndata &lt;- c(1, 2, 2, 3, 3, 3, 4, 5)\nmodeOf(data)\n\n[1] 3\n\n\n⚠️ Important Note\nThere is a base R function also named mode() — but it returns the data type (like \"numeric\", \"character\") instead of calculating the statistical mode!\nExample: Mode in Data Frame\n\ndf &lt;- data.frame(\n  Score = c(1, 2, 2, 3, 4, 3, NA),\n  Group = c(\"A\", \"B\", \"B\", \"B\", \"A\", \"A\", NA),\n  Age   = c(20, 22, 21, 22, 21, 22, 21)\n)\n\nsapply(df, modeOf)\n\n     Score Group Age \n[1,] \"2\"   \"A\"   \"22\"\n[2,] \"3\"   \"B\"   \"21\"\n\n\nThe sapply() function is executed on each column of the dataframe.\n\n\n2.1.2 Mode in Python\nCalculating the Mode in Python Using pandas\nUse .mode() to Find the Mode\nExaple 1:\n\nimport pandas as pd\n\ndata = pd.Series([1, 2, 2, 3, 4, 4, 5])\nmod = data.mode()\nprint(\"Mode:\", mod.tolist())\n\nMode: [2, 4]\n\n#or\n\nprint (mod)\n\n0    2\n1    4\ndtype: int64\n\n\nExample 2: Create a Sample Data Frame.\nMode for All Columns:\n\ndata = {\n    'A': [1, 2, 2, 3, 4],\n    'B': [5, 5, 6, 7, 7],\n    'C': [10, 10, 10, 11, 12]\n}\n\ndf = pd.DataFrame(data)\n\nmode_values = df.mode()\nprint(mode_values)\n\n     A  B     C\n0  2.0  5  10.0\n1  NaN  7   NaN\n\n\nExample 3:\nMode for All Columns:\n\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eli\", \"Fiona\"],\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Gender\": [\"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Female\"]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n      Name  Age  Gender\n0    Alice   24  Female\n1      Bob   30    Male\n2  Charlie   22    Male\n3    Diana   24  Female\n4      Eli   30    Male\n5    Fiona   24  Female\n\n\nMode of the \"Age\" column:\n\ndf[\"Age\"].mode()\n\n0    24\nName: Age, dtype: int64\n\n\n\n\n2.1.3 Median in R\nThe median is the middle value of a dataset when the numbers are sorted in order.\n\nIf the number of values is odd, it’s the middle one.\nIf it’s even, it’s the average of the two middle numbers.\n\nBasic median() function.\n\nx &lt;- c(10, 20, 30, 40, 50)\nmedian(x)\n\n[1] 30\n\n\nWith missing values (NA) we can use na.rm = TRUE\n\ny &lt;- c(5, 8, NA, 12)\nmedian(y, na.rm =TRUE)\n\n[1] 8\n\n\nUsing tapply with categorical variables in R\ntapply lets you apply a function (like median) to subsets of a vector, defined by a categorical variable (factor).\n\nAge &lt;- c(24, 30, 22, 24, 30, 24)\nGender &lt;- c(\"F\", \"M\", \"M\", \"F\", \"M\", \"F\")\n\ntapply(Age, Gender, median)\n\n F  M \n24 30 \n\n\nExplanation:\n\nFirst argument → numeric vector (Age)\nSecond argument → categorical variable (Gender)\nThird argument → function to apply (median)\n\nSo this gives you the median age for each gender.\nExample : DataFrame\n\ndata &lt;- data.frame(\n  Gender = c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"),\n  Anxiety = c(12, 15, NA, 20, 18, 25),\n  Depression = c(30, NA, 28, 35, 40, NA)\n)\n\ndata\n\n  Gender Anxiety Depression\n1      f      12         30\n2      f      15         NA\n3      m      NA         28\n4      m      20         35\n5      f      18         40\n6      m      25         NA\n\n\nUse sapply , lapply\n\nsapply(data[, c(\"Anxiety\",\"Depression\")], median, na.rm = TRUE)  #1\n\n   Anxiety Depression \n      18.0       32.5 \n\n#or\nsapply(data[sapply(data, is.numeric)], median, na.rm = TRUE)     #2\n\n   Anxiety Depression \n      18.0       32.5 \n\n#or\nlapply(data[, c(\"Anxiety\",\"Depression\")], median, na.rm = TRUE)  #3\n\n$Anxiety\n[1] 18\n\n$Depression\n[1] 32.5\n\n\nUse tapply\n\ntapply(data$Anxiety, data$Gender, median, na.rm = TRUE)\n\n   f    m \n15.0 22.5 \n\ntapply(data$Depression, data$Gender, median, na.rm = TRUE)\n\n   f    m \n35.0 31.5 \n\n\nUse aggregate\n\naggregate(cbind(Anxiety, Depression) ~ Gender, data = data, median,na.rm = TRUE)\n\n  Gender Anxiety Depression\n1      f      15         35\n2      m      20         35\n\n\n\n\n2.1.4 Median in Python\n1.Using the statistics library\n\nimport statistics\n\ndata = [10, 12, 15, 17, 18]\nmedian_value = statistics.median(data)\n\nprint(\"Median:\", median_value)\n\nMedian: 15\n\n\n2.Using the NumPy library\n\nimport numpy as np\n\ndata = [10, 12, 15, 17, 18]\nmedian_value = np.median(data)\n\nprint(\"Median:\", median_value)\n\nMedian: 15.0\n\n\n3.Using the Pandaslibrary to DataFrame\n\nimport pandas as pd\n\ndata = {\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Score\": [85, 90, 78, 92, 88, 95]\n}\n\ndf = pd.DataFrame(data)\n\nprint(\"Median Age:\", df[\"Age\"].median())\n\nMedian Age: 24.0\n\nprint(\"Median Score:\", df[\"Score\"].median())\n\nMedian Score: 89.0\n\n\nMedian in data with missing values ​​(NaN)\nSometimes data contains missing values. Pandas and NumPy can handle them easily:\n\nimport numpy as np\nimport pandas as pd\n\ndata = [10, 12, np.nan, 17, 18]\n\n# با NumPy\nprint(\"Median with NumPy:\", np.nanmedian(data))\n\nMedian with NumPy: 14.5\n\n# با Pandas\ns = pd.Series(data)\nprint(\"Median with Pandas:\", s.median())\n\nMedian with Pandas: 14.5\n\n\nExample :Data Frame (Numeric + Categorical)\n\nimport pandas as pd\nimport numpy as np\n\n# ساخت دیتافریم\ndata = {\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Score\": [85, np.nan, 78, 92, np.nan, 95],\n    \"Gender\": [\"F\", \"M\", \"M\", \"F\", \"M\", \"F\"]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n   Age  Score Gender\n0   24   85.0      F\n1   30    NaN      M\n2   22   78.0      M\n3   24   92.0      F\n4   30    NaN      M\n5   24   95.0      F\n\n\nCalculate the median for each column.\n\nmedians = df.median(numeric_only=True, skipna=True)\nprint(medians)\n\nAge      24.0\nScore    88.5\ndtype: float64\n\n\nCalculating the median by gender\n\ngroup_medians = df.groupby(\"Gender\").median(numeric_only=True)\nprint(group_medians)\n\n         Age  Score\nGender             \nF       24.0   92.0\nM       30.0   78.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "chapter1.html#mode-in-python",
    "href": "chapter1.html#mode-in-python",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.2 Mode in Python",
    "text": "2.2 Mode in Python\nCalculating the Mode in Python Using pandas\nUse .mode() to Find the Mode\nExaple 1:\n\nimport pandas as pd\n\ndata = pd.Series([1, 2, 2, 3, 4, 4, 5])\nmod = data.mode()\nprint(\"Mode:\", mod.tolist())\n\nMode: [2, 4]\n\n#or\n\nprint (mod)\n\n0    2\n1    4\ndtype: int64\n\n\nExample 2: Create a Sample Data Frame.\nMode for All Columns:\n\ndata = {\n    'A': [1, 2, 2, 3, 4],\n    'B': [5, 5, 6, 7, 7],\n    'C': [10, 10, 10, 11, 12]\n}\n\ndf = pd.DataFrame(data)\n\nmode_values = df.mode()\nprint(mode_values)\n\n     A  B     C\n0  2.0  5  10.0\n1  NaN  7   NaN\n\n\nExample 3:\nMode for All Columns:\n\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eli\", \"Fiona\"],\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Gender\": [\"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Female\"]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n      Name  Age  Gender\n0    Alice   24  Female\n1      Bob   30    Male\n2  Charlie   22    Male\n3    Diana   24  Female\n4      Eli   30    Male\n5    Fiona   24  Female\n\n\nMode of the \"Age\" column:\n\ndf[\"Age\"].mode()\n\n0    24\nName: Age, dtype: int64",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "chapter1.html#median-in-r",
    "href": "chapter1.html#median-in-r",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.3 Median in R",
    "text": "2.3 Median in R\nThe median is the middle value of a dataset when the numbers are sorted in order.\n\nIf the number of values is odd, it’s the middle one.\nIf it’s even, it’s the average of the two middle numbers.\n\nBasic median() function.\n\nx &lt;- c(10, 20, 30, 40, 50)\nmedian(x)\n\n[1] 30\n\n\nWith missing values (NA) we can use na.rm = TRUE\n\ny &lt;- c(5, 8, NA, 12)\nmedian(y, na.rm =TRUE)\n\n[1] 8\n\n\nUsing tapply with categorical variables in R\ntapply lets you apply a function (like median) to subsets of a vector, defined by a categorical variable (factor).\n\nAge &lt;- c(24, 30, 22, 24, 30, 24)\nGender &lt;- c(\"F\", \"M\", \"M\", \"F\", \"M\", \"F\")\n\ntapply(Age, Gender, median)\n\n F  M \n24 30 \n\n\nExplanation:\n\nFirst argument → numeric vector (Age)\nSecond argument → categorical variable (Gender)\nThird argument → function to apply (median)\n\nSo this gives you the median age for each gender.\nExample : DataFrame\n\ndata &lt;- data.frame(\n  Gender = c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"),\n  Anxiety = c(12, 15, NA, 20, 18, 25),\n  Depression = c(30, NA, 28, 35, 40, NA)\n)\n\ndata\n\n  Gender Anxiety Depression\n1      f      12         30\n2      f      15         NA\n3      m      NA         28\n4      m      20         35\n5      f      18         40\n6      m      25         NA\n\n\nUse sapply , lapply\n\nsapply(data[, c(\"Anxiety\",\"Depression\")], median, na.rm = TRUE)  #1\n\n   Anxiety Depression \n      18.0       32.5 \n\n#or\nsapply(data[sapply(data, is.numeric)], median, na.rm = TRUE)     #2\n\n   Anxiety Depression \n      18.0       32.5 \n\n#or\nlapply(data[, c(\"Anxiety\",\"Depression\")], median, na.rm = TRUE)  #3\n\n$Anxiety\n[1] 18\n\n$Depression\n[1] 32.5\n\n\nUse tapply\n\ntapply(data$Anxiety, data$Gender, median, na.rm = TRUE)\n\n   f    m \n15.0 22.5 \n\ntapply(data$Depression, data$Gender, median, na.rm = TRUE)\n\n   f    m \n35.0 31.5 \n\n\nUse aggregate\n\naggregate(cbind(Anxiety, Depression) ~ Gender, data = data, median,na.rm = TRUE)\n\n  Gender Anxiety Depression\n1      f      15         35\n2      m      20         35",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "chapter1.html#median-in-python",
    "href": "chapter1.html#median-in-python",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.4 Median in Python",
    "text": "2.4 Median in Python\n1.Using the statistics library\n\nimport statistics\n\ndata = [10, 12, 15, 17, 18]\nmedian_value = statistics.median(data)\n\nprint(\"Median:\", median_value)\n\nMedian: 15\n\n\n2.Using the NumPy library\n\nimport numpy as np\n\ndata = [10, 12, 15, 17, 18]\nmedian_value = np.median(data)\n\nprint(\"Median:\", median_value)\n\nMedian: 15.0\n\n\n3.Using the Pandaslibrary to DataFrame\n\nimport pandas as pd\n\ndata = {\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Score\": [85, 90, 78, 92, 88, 95]\n}\n\ndf = pd.DataFrame(data)\n\nprint(\"Median Age:\", df[\"Age\"].median())\n\nMedian Age: 24.0\n\nprint(\"Median Score:\", df[\"Score\"].median())\n\nMedian Score: 89.0\n\n\nMedian in data with missing values ​​(NaN)\nSometimes data contains missing values. Pandas and NumPy can handle them easily:\n\nimport numpy as np\nimport pandas as pd\n\ndata = [10, 12, np.nan, 17, 18]\n\n# با NumPy\nprint(\"Median with NumPy:\", np.nanmedian(data))\n\nMedian with NumPy: 14.5\n\n# با Pandas\ns = pd.Series(data)\nprint(\"Median with Pandas:\", s.median())\n\nMedian with Pandas: 14.5\n\n\nExample :Data Frame (Numeric + Categorical)\n\nimport pandas as pd\nimport numpy as np\n\n\ndata = {\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Score\": [85, np.nan, 78, 92, np.nan, 95],\n    \"Gender\": [\"F\", \"M\", \"M\", \"F\", \"M\", \"F\"]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n   Age  Score Gender\n0   24   85.0      F\n1   30    NaN      M\n2   22   78.0      M\n3   24   92.0      F\n4   30    NaN      M\n5   24   95.0      F\n\n\nCalculate the median for each column.\n\nmedians = df.median(numeric_only=True, skipna=True)\nprint(medians)\n\nAge      24.0\nScore    88.5\ndtype: float64\n\n\nCalculating the median by gender\n\ngroup_medians = df.groupby(\"Gender\").median(numeric_only=True)\nprint(group_medians)\n\n         Age  Score\nGender             \nF       24.0   92.0\nM       30.0   78.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "index.html#chapter1-measures-of-central-tendency",
    "href": "index.html#chapter1-measures-of-central-tendency",
    "title": "Statistics with R and Python",
    "section": "1.1 chapter1: Measures of central tendency",
    "text": "1.1 chapter1: Measures of central tendency",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Statistics with R and Python</span>"
    ]
  },
  {
    "objectID": "index.html#descriptive-statistics",
    "href": "index.html#descriptive-statistics",
    "title": "Statistics with R and Python",
    "section": "",
    "text": "0.1.1 1: Measures of central tendency\n\n\n0.1.2 2: Measures of variability",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Statistics with R and Python</span>"
    ]
  },
  {
    "objectID": "chapter1.html#mean-in-r",
    "href": "chapter1.html#mean-in-r",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.5 Mean in R",
    "text": "2.5 Mean in R\n\n2.5.1 Arithmetic Mean in R\nIn R, we use the mean() function to calculate the mean.\n\nanxiety_scores &lt;- c(12, 15, 20, 22, 18, 30, 25, 19, 17, 50)\nmean(anxiety_scores)\n\n[1] 22.8\n\n\nMean with missing data (NA) in R\nIf the data contains missing values ​​(NA), you must use the argument na.rm = TRUE\n\ndata &lt;- c(5, 10, NA, 20)\n\nmean(data, na.rm = TRUE)\n\n[1] 11.66667\n\n\ncategorical variables: tapply\nThe researcher wants to examine the average depression scores of two groups (men and women). To do this, we use tapply.\n\ngroup &lt;- c(\"f\",\"f\",\"f\",\"m\",\"m\",\"m\")\ndepression &lt;- c(18, 22, 20, 25, 30, 28)\n\ntapply(depression, group, mean)\n\n       f        m \n20.00000 27.66667 \n\n\nCalculating the mean in a Data Frame with missing data(NA)\nA researcher collected anxiety and depression scores from psychology students. Some students did not answer some questions, and the data is incomplete.\n\ndata &lt;- data.frame(\n  Gender = c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"),\n  Anxiety = c(12, 15, NA, 20, 18, 25),\n  Depression = c(30, NA, 28, 35, 40, NA)\n)\n\ndata\n\n  Gender Anxiety Depression\n1      f      12         30\n2      f      15         NA\n3      m      NA         28\n4      m      20         35\n5      f      18         40\n6      m      25         NA\n\n\nUse lapply , sapply\nMean of each column “Anxiety”,”Depression” (regardless of gender)\n\nsapply(data[, c(\"Anxiety\",\"Depression\")], mean, na.rm = TRUE)  #1\n\n   Anxiety Depression \n     18.00      33.25 \n\n#or\nsapply(data[sapply(data, is.numeric)], mean, na.rm = TRUE)     #2\n\n   Anxiety Depression \n     18.00      33.25 \n\n#or\nlapply(data[,",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "chapter1.html#mean-in-python",
    "href": "chapter1.html#mean-in-python",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.6 Mean in Python",
    "text": "2.6 Mean in Python\n\n2.6.1 Arithmetic Mean in Python\nMethod 1: Using statistics.mean\n\nimport statistics\n\nnumbers = [10, 20, 30, 40, 50]\nmean_value = statistics.mean(numbers)\n\nprint(\"Mean:\", mean_value)\n\nMean: 30\n\n\nMethod 2: Using NumPy\n\nimport numpy as np\n\nnumbers = [10, 20, 30, 40, 50]\nmean_value = np.mean(numbers)\n\nprint(\"Mean:\", mean_value)\n\nMean: 30.0\n\n\n\nIf the data is small: use statistics.mean\nIf the data is large or a matrix: use numpy.mean.\n\nMethod 3: Using Pandas\nExample 1: Calculating the mean of a column\n\nimport pandas as pd\n\ndata = {\n  \"Name\":[\"Sevda\", \"MG\", \"Reza\", \"RG\"],\n   \"Math\":[20, 12, 18, 15],\n   \"Statistics\": [17, 16, 19, 14]\n}\n\ndf = pd.DataFrame(data)\n\nmean_math = df[\"Math\"].mean()\n\nprint(\"Math:\", mean_math)\n\nMath: 16.25\n\n\nExample 2: Calculating the mean of all columns\n\nmeans = df.mean(numeric_only=True)\nprint(means)\n\nMath          16.25\nStatistics    16.50\ndtype: float64\n\n\nExample 3: Calculating the mean of each row\n\ndf[\"Individual Mean\"] = df.mean(numeric_only=True, axis=1)\n\nprint(df)\n\n    Name  Math  Statistics  Individual Mean\n0  Sevda    20          17             18.5\n1     MG    12          16             14.0\n2   Reza    18          19             18.5\n3     RG    15          14             14.5\n\n\nMean with NaN\n\nUsing Pandas The Pandas library ignores NaN values ​​by default in its statistical functions.\n\n\nimport pandas as pd\nimport numpy as np\n\n\ndata = {\n  \"Name\":[\"Sevda\", \"MG\", \"Reza\", \"RG\"],\n   \"Math\":[20, 12, np.nan, 15],\n   \"Statistics\": [17, 16, 19, np.nan]\n}\n\ndf = pd.DataFrame(data)\n\nmean_math = df[\"Math\"].mean()\nmean_Statistics = df[\"Statistics\"].mean()\n\n\nprint(\"Math:\", mean_math)\n\nMath: 15.666666666666666\n\nprint(\"Statistics:\", mean_Statistics)\n\nStatistics: 17.333333333333332\n\n\n\nmeans = df.mean(numeric_only=True)\nprint(means)\n\nMath          15.666667\nStatistics    17.333333\ndtype: float64\n\n\n\nUsing NumPy with np.nanmean()\n\n\nimport numpy as np\n\nnumbers = [10, 20, np.nan, 30, 40]\n\nmean_value = np.nanmean(numbers)\n\nprint(\" Mean:\", mean_value)\n\n Mean: 25.0\n\n\nExample: DataFrame (numeric + categorical)\n\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    \"Name\":[\"Sevda\", \"MG\", \"Reza\", \"RG\", \"SG\"],\n    \"Class\":[\"A\", \"B\", \"C\", \"A\", \"C\"],\n    \"Math\":[12, 18, 15, np.nan, 20],\n    \"physics\": [17, 16, 19, 14, np.nan],\n    \"Psychology\": [np.nan, 18, 13, 15, 19]\n}\n\ndf = pd.DataFrame(data)\n\nprint(df)\n\n    Name Class  Math  physics  Psychology\n0  Sevda     A  12.0     17.0         NaN\n1     MG     B  18.0     16.0        18.0\n2   Reza     C  15.0     19.0        13.0\n3     RG     A   NaN     14.0        15.0\n4     SG     C  20.0      NaN        19.0\n\n\n\nMean of all numeric columns\n\n\nmeans = df.mean(numeric_only=True)\nprint(means)\n\nMath          16.25\nphysics       16.50\nPsychology    16.25\ndtype: float64\n\n\n\nMean of each row (for each student)\n\n\ndf[\"Individual Mean\"] = df.mean(numeric_only=True, axis=1)\n\nprint(df)\n\n    Name Class  Math  physics  Psychology  Individual Mean\n0  Sevda     A  12.0     17.0         NaN        14.500000\n1     MG     B  18.0     16.0        18.0        17.333333\n2   Reza     C  15.0     19.0        13.0        15.666667\n3     RG     A   NaN     14.0        15.0        14.500000\n4     SG     C  20.0      NaN        19.0        19.500000\n\n\n\nCalculate the group mean (based on categorical column)\n\n\ngroup_means = df.groupby(\"Class\").mean(numeric_only=True)\nprint(group_means)\n\n       Math  physics  Psychology  Individual Mean\nClass                                            \nA      12.0     15.5        15.0        14.500000\nB      18.0     16.0        18.0        17.333333\nC      17.5     19.0        16.0        17.583333\n\n\n\n\n2.6.2 Geometric Mean in Python\n\nUsing statistics.geometric_mean (Python 3.8 and later)\n\n\nimport statistics\n\nnumbers = [2, 8, 4]\n\ngm = statistics.geometric_mean(numbers)\n\nprint(\"geometric_mean:\", gm)\n\ngeometric_mean: 4.0\n\n\n\nUsing SciPy :scipy.stats.gmean\n\n\nfrom scipy.stats import gmean\n\nnumbers = [2, 8, 4]\n\ngm = gmean(numbers)\n\nprint(\"gmean:\", gm)\n\ngmean: 4.0\n\n\nIf a number is zero: the total geometric mean is zero.\n\nIf a number is negative: the geometric mean is not defined (except in special cases).\n\n\n\n2.6.3 Harmonic Mean in Python\n\nUsing statistics.harmonic_mean (Python 3.6 and later)\n\n\nimport statistics\n\nnumbers = [2, 4, 4]\n\nhm = statistics.harmonic_mean(numbers)\n\nprint(\"hm :\", hm)\n\nhm : 3.0\n\n\n\nUsing SciPy :scipy.stats.hmean\n\n\nfrom scipy.stats import hmean\n\nnumbers = [2, 4, 4]\n\nhm = hmean(numbers)\n\nprint(\"hmean:\", hm)\n\nhmean: 3.0\n\n\n\nAll data must be positive. If a value is zero or negative, the harmonic mean is not defined.\nThe main application is in rates (such as average speed over equal distances).\n\n\n\n2.6.4 Trimmed Mean in Python\nThe trimmed mean is the same as the regular mean, except that some of the largest and smallest data (for example, the top 10% and bottom 10%) are removed and then the mean is taken.\n\nUsing SciPy (scipy.stats.trim_mean)\n\n\nfrom scipy.stats import trim_mean\n\nnumbers = [1, 2, 2, 3, 4, 100]\n\ntm = trim_mean(numbers, 0.1)\n\nprint(\"tm :\", tm)\n\ntm : 18.666666666666668\n\n\n\ntrim_mean(data, 0.1) : Remove 10% of the data from the beginning and end\ntrim_mean(data, 0.2) : Remove 20% of the data\n\nEnd Reza",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "chapter2.html#range-in-python",
    "href": "chapter2.html#range-in-python",
    "title": "3  chapter2: Measures of variability",
    "section": "3.2 Range in Python",
    "text": "3.2 Range in Python\n\ndata = [12, 15, 18, 25, 30, 35]\n\nrange_value = max(data) - min(data)\nprint(range_value)\n\n23\n\n\nRange with missing data (NA) in Python\n\nimport pandas as pd\n\ndata = [10, 15, None, 25, 30, None, 40]\ns = pd.Series(data)\n\nrange_value = s.max() - s.min()\n\nprint(range_value)\n\n30.0\n\n\nRange with DataFrame (Numeric columns)\n\nimport pandas as pd\n\ndata = {\n    \"A\": [10, 15, 20, 25, 30],\n    \"B\": [5, 7, 9, 12, 15],\n    \"C\": [100, 120, 110, 130, 140]\n}\ndf = pd.DataFrame(data)\n\nrange_values = df.max() - df.min()\nprint(range_values)\n\nA    20\nB    10\nC    40\ndtype: int64\n\n\nOnly for one column\n\nrange_A = df[\"A\"].max() - df[\"A\"].min()\nprint(range_A)\n\n20\n\n\nRange with DataFrame (Numeric + Categorical)\n\nimport pandas as pd\n\ndata = {\n    \"A\": [10, 15, 20, 25, 30],\n    \"B\": [5, 7, 9, 12, 15],\n    \"C\": [100, 120, 110, 130, 140],\n    \"Gender\": [\"Male\", \"Female\", \"Male\", \"Female\", \"Male\"]\n}\ndf = pd.DataFrame(data)\n\nrange_values = df.select_dtypes(include=\"number\").max() - df.select_dtypes(include=\"number\").min()\n\nprint(range_values)\n\nA    20\nB    10\nC    40\ndtype: int64",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>chapter2: Measures of variability</span>"
    ]
  },
  {
    "objectID": "chapter2.html#deciles-percentiles-and-quartiles-in-r",
    "href": "chapter2.html#deciles-percentiles-and-quartiles-in-r",
    "title": "3  chapter2: Measures of variability",
    "section": "3.3 Deciles, Percentiles, and Quartiles in R",
    "text": "3.3 Deciles, Percentiles, and Quartiles in R\n\n3.3.1 1.Deciles in R\nDeciles divide the data into 10 equal groups (each 10%).\n\ndata &lt;- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)\nquantile(data, probs = seq(0, 1,by = 0.1))\n\n  0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% \n 5.0  7.2  9.6 12.9 16.2 20.0 23.8 28.5 34.0 39.5 50.0 \n\n\n\n\n3.3.2 2. Percentiles in R\nTo calculate any percentile, use the same function with a decimal value.\nFor example, the 25th percentile and the 90th percentile:\n\ndata &lt;- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)\nquantile(data, probs = c(0.25, 0.9))\n\n  25%   90% \n11.25 39.50 \n\n\nOr all percentiles (as a complete vector):\n\ndata &lt;- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)\nquantile(data, probs = seq(0, 1, 0.01))\n\n   0%    1%    2%    3%    4%    5%    6%    7%    8%    9%   10%   11%   12% \n 5.00  5.22  5.44  5.66  5.88  6.10  6.32  6.54  6.76  6.98  7.20  7.42  7.64 \n  13%   14%   15%   16%   17%   18%   19%   20%   21%   22%   23%   24%   25% \n 7.86  8.08  8.30  8.52  8.74  8.96  9.27  9.60  9.93 10.26 10.59 10.92 11.25 \n  26%   27%   28%   29%   30%   31%   32%   33%   34%   35%   36%   37%   38% \n11.58 11.91 12.24 12.57 12.90 13.23 13.56 13.89 14.22 14.55 14.88 15.21 15.54 \n  39%   40%   41%   42%   43%   44%   45%   46%   47%   48%   49%   50%   51% \n15.87 16.20 16.53 16.86 17.19 17.52 17.85 18.24 18.68 19.12 19.56 20.00 20.44 \n  52%   53%   54%   55%   56%   57%   58%   59%   60%   61%   62%   63%   64% \n20.88 21.32 21.76 22.15 22.48 22.81 23.14 23.47 23.80 24.13 24.46 24.79 25.20 \n  65%   66%   67%   68%   69%   70%   71%   72%   73%   74%   75%   76%   77% \n25.75 26.30 26.85 27.40 27.95 28.50 29.05 29.60 30.15 30.70 31.25 31.80 32.35 \n  78%   79%   80%   81%   82%   83%   84%   85%   86%   87%   88%   89%   90% \n32.90 33.45 34.00 34.55 35.10 35.65 36.20 36.75 37.30 37.85 38.40 38.95 39.50 \n  91%   92%   93%   94%   95%   96%   97%   98%   99%  100% \n40.10 41.20 42.30 43.40 44.50 45.60 46.70 47.80 48.90 50.00 \n\n\n\n\n3.3.3 3. Quartiles in R\nYou can use the quantile() function to compute quartiles.\n\ndata &lt;- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)\nquantile(data)\n\n   0%   25%   50%   75%  100% \n 5.00 11.25 20.00 31.25 50.00 \n\nquantile(data, probs = c(0.25, 0.5, 0.75))\n\n  25%   50%   75% \n11.25 20.00 31.25 \n\n\nQuartiles with NA\nna.rm = TRUE\n\ndata &lt;- c(12, 5, 7, NA, 15, 18, 22, NA, 30, 35, 40, 50)\nquantile(data, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)\n\n  25%   50%   75% \n12.75 20.00 33.75 \n\n\nIf you want, without removing NA but replacing it with the mean.\n\ndata &lt;- c(12, 5, 7, NA, 15, 18, 22, NA, 30, 35, 40, 50)\ndata_filled &lt;- ifelse(is.na(data), mean(data, na.rm = TRUE), data)\nquantile(data_filled)\n\n   0%   25%   50%   75%  100% \n 5.00 14.25 22.70 31.25 50.00 \n\n\nDataFrame with NA\nCalculating quartiles for each column\n\ndf &lt;- data.frame(\n  height = c(160, 165, 170, NA, 180, 190, NA),\n  weight = c(50, 55, NA, 70, 80, 90, 95),\n  age    = c(20, 25, 30, 35, NA, 45, 50)\n)\n\nsapply(df, function(x) quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE))\n\n    height weight   age\n25%    165  58.75 26.25\n50%    170  75.00 32.50\n75%    180  87.50 42.50\n\n\nfor a column\n\nquantile(df$weight, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)\n\n  25%   50%   75% \n58.75 75.00 87.50 \n\n\nDataFrame with Categorical variable\n\ndf &lt;- data.frame(\n  height = c(160, 165, 170, NA, 180, 190, NA),\n  weight = c(50, 55, NA, 70, 80, 90, 95),\n  age    = c(20, 25, 30, 35, NA, 45, 50),\n  Gender = c('Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male')\n)\n\nquantile(df$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)\n\n25% 50% 75% \n165 170 180 \n\nquantile(df$weight, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)\n\n  25%   50%   75% \n58.75 75.00 87.50 \n\nquantile(df$age,    probs = c(0.25, 0.5, 0.75), na.rm = TRUE)\n\n  25%   50%   75% \n26.25 32.50 42.50 \n\n\nwith dplyr\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndf %&gt;%\n  group_by(Gender) %&gt;%\n  summarise(\n    height_Q1 = quantile(height, 0.25, na.rm = TRUE),\n    height_Median = quantile(height, 0.5, na.rm = TRUE),\n    height_Q3 = quantile(height, 0.75, na.rm = TRUE),\n    \n    weight_Q1 = quantile(weight, 0.25, na.rm = TRUE),\n    weight_Median = quantile(weight, 0.5, na.rm = TRUE),\n    weight_Q3 = quantile(weight, 0.75, na.rm = TRUE),\n    \n    age_Q1 = quantile(age, 0.25, na.rm = TRUE),\n    age_Median = quantile(age, 0.5, na.rm = TRUE),\n    age_Q3 = quantile(age, 0.75, na.rm = TRUE)\n  )\n\n# A tibble: 2 × 10\n  Gender height_Q1 height_Median height_Q3 weight_Q1 weight_Median weight_Q3\n  &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n1 Female      171.          178.      184.      62.5            70      80  \n2 Male        165           170       175       65              80      87.5\n# ℹ 3 more variables: age_Q1 &lt;dbl&gt;, age_Median &lt;dbl&gt;, age_Q3 &lt;dbl&gt;\n\n\nwith tapply\nBy Gender variable\n\ndf &lt;- data.frame(\n  height = c(160, 165, 170, NA, 180, 190, NA),\n  weight = c(50, 55, NA, 70, 80, 90, 95),\n  age    = c(20, 25, 30, 35, NA, 45, 50),\n  Gender = c('Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male')\n)\n\ntapply(df$height, df$Gender, function(x) quantile(x, probs = c(0.25,0.5,0.75), na.rm = TRUE))\n\n$Female\n   25%    50%    75% \n171.25 177.50 183.75 \n\n$Male\n25% 50% 75% \n165 170 175",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>chapter2: Measures of variability</span>"
    ]
  },
  {
    "objectID": "chapter2.html#interquartile-range-in-r---iqr-function",
    "href": "chapter2.html#interquartile-range-in-r---iqr-function",
    "title": "3  chapter2: Measures of variability",
    "section": "3.4 Interquartile Range in R - IQR() Function",
    "text": "3.4 Interquartile Range in R - IQR() Function\nthe interquartile range is the difference between the upper quartile and the lower quartile.\nIQR=Q3−Q1\nIQR() Function\n\ndata &lt;- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)\nIQR(data)\n\n[1] 20\n\n\nFunction quantile()\n\nQ1 &lt;- quantile(data, 0.25)\nQ3 &lt;- quantile(data, 0.75)\nIQR &lt;- Q3 - Q1\nIQR\n\n75% \n 20 \n\n\nDataFrame (Numeric)\nsapply\n\ndf &lt;- data.frame(\n  height = c(160, 165, 170, 172, 180, 190),\n  weight = c(50, 55, 60, 70, 80, 90)\n)\n\nsapply(df, IQR)\n\nheight weight \n 11.75  21.25 \n\n\nDataFrame with NA\n\ndf &lt;- data.frame(\n  height = c(160, 165, 170, NA, 180, 190, NA),\n  weight = c(50, 55, NA, 70, 80, 90, 95),\n  age    = c(20, 25, 30, 35, NA, 45, 50)\n)\n\nsapply(df, IQR, na.rm = TRUE)\n\nheight weight    age \n 15.00  28.75  16.25 \n\n\nJust for weight\n\nIQR(df$weight, na.rm = TRUE)\n\n[1] 28.75\n\n\nDataFrame (Numeric + Categorical) variable\n\ndf &lt;- data.frame(\n  gender = c(\"Male\", \"Female\", \"Male\", \"Female\", \"Male\", \"Female\", \"Male\"),\n  height = c(160, 165, 170, NA, 180, 190, NA),\n  weight = c(50, 55, NA, 70, 80, 90, 95),\n  age    = c(20, 25, 30, 35, NA, 45, 50)\n)\ndf\n\n  gender height weight age\n1   Male    160     50  20\n2 Female    165     55  25\n3   Male    170     NA  30\n4 Female     NA     70  35\n5   Male    180     80  NA\n6 Female    190     90  45\n7   Male     NA     95  50\n\nby(df$weight, df$gender, function(x) quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE))\n\ndf$gender: Female\n 25%  50%  75% \n62.5 70.0 80.0 \n------------------------------------------------------------ \ndf$gender: Male\n 25%  50%  75% \n65.0 80.0 87.5 \n\n\n\ntapply(df$weight, df$gender, IQR, na.rm = TRUE)\n\nFemale   Male \n  17.5   22.5 \n\n\nIf you want to calculate height, weight, and age all at once:\n\nlibrary(dplyr)\n\ndf %&gt;%\n  group_by(gender) %&gt;%\n  summarise(\n    IQR_height = IQR(height, na.rm = TRUE),\n    IQR_weight = IQR(weight, na.rm = TRUE),\n    IQR_age    = IQR(age, na.rm = TRUE)\n  )\n\n# A tibble: 2 × 4\n  gender IQR_height IQR_weight IQR_age\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n1 Female       12.5       17.5      10\n2 Male         10         22.5      15",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>chapter2: Measures of variability</span>"
    ]
  }
]