[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistics with R and Python",
    "section": "",
    "text": "0.1 Descriptive statistics\nIntroduction\nThis book is designed for psychology students to become familiar with statistical concepts in the R and Python programming languages.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Statistics with R and Python</span>"
    ]
  },
  {
    "objectID": "chapter1.html",
    "href": "chapter1.html",
    "title": "2  chapter1: Measures of central tendency",
    "section": "",
    "text": "2.1 Mode in R\nIn this chapter we will learn descriptive statistics.\nMeasures of Central Tendency are statistical values that represent the center or typical value of a data set. They help us understand the overall trend or “average” behavior of the data.\nThe mode is the value(s) that appear most frequently in the data set.\nIn R, the lsr package provides a simple and clean way to calculate the mode.\nStep 1: Install and Load the lsr Package\ninstall.packages(\"lsr\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.5'\n(as 'lib' is unspecified)\n\nlibrary(lsr)\nExample:\ndata &lt;- c(1, 2, 2, 3, 3, 3, 4, 5)\nmodeOf(data)\n\n[1] 3\n⚠️ Important Note\nThere is a base R function also named mode() — but it returns the data type (like \"numeric\", \"character\") instead of calculating the statistical mode!\nExample: Mode in Data Frame\ndf &lt;- data.frame(\n  Score = c(1, 2, 2, 3, 4, 3, NA),\n  Group = c(\"A\", \"B\", \"B\", \"B\", \"A\", \"A\", NA),\n  Age   = c(20, 22, 21, 22, 21, 22, 21)\n)\n\nsapply(df, modeOf)\n\n     Score Group Age \n[1,] \"2\"   \"A\"   \"22\"\n[2,] \"3\"   \"B\"   \"21\"\nThe sapply() function is executed on each column of the dataframe.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "chapter2.html",
    "href": "chapter2.html",
    "title": "3  chapter2: Measures of variability",
    "section": "",
    "text": "Drawing graphs",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>chapter2: Measures of variability</span>"
    ]
  },
  {
    "objectID": "chapter1.html#measures-of-central-tendency",
    "href": "chapter1.html#measures-of-central-tendency",
    "title": "2  chapter1: Descriptive statistics",
    "section": "",
    "text": "2.1.1 Mode in R\nThe mode is the value(s) that appear most frequently in the data set.\nIn R, the lsr package provides a simple and clean way to calculate the mode.\nStep 1: Install and Load the lsr Package\n\ninstall.packages(\"lsr\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.5'\n(as 'lib' is unspecified)\n\nlibrary(lsr)\n\nExample:\n\ndata &lt;- c(1, 2, 2, 3, 3, 3, 4, 5)\nmodeOf(data)\n\n[1] 3\n\n\n⚠️ Important Note\nThere is a base R function also named mode() — but it returns the data type (like \"numeric\", \"character\") instead of calculating the statistical mode!\nExample: Mode in Data Frame\n\ndf &lt;- data.frame(\n  Score = c(1, 2, 2, 3, 4, 3, NA),\n  Group = c(\"A\", \"B\", \"B\", \"B\", \"A\", \"A\", NA),\n  Age   = c(20, 22, 21, 22, 21, 22, 21)\n)\n\nsapply(df, modeOf)\n\n     Score Group Age \n[1,] \"2\"   \"A\"   \"22\"\n[2,] \"3\"   \"B\"   \"21\"\n\n\nThe sapply() function is executed on each column of the dataframe.\n\n\n2.1.2 Mode in Python\nCalculating the Mode in Python Using pandas\nUse .mode() to Find the Mode\nExaple 1:\n\nimport pandas as pd\n\ndata = pd.Series([1, 2, 2, 3, 4, 4, 5])\nmod = data.mode()\nprint(\"Mode:\", mod.tolist())\n\nMode: [2, 4]\n\n#or\n\nprint (mod)\n\n0    2\n1    4\ndtype: int64\n\n\nExample 2: Create a Sample Data Frame.\nMode for All Columns:\n\ndata = {\n    'A': [1, 2, 2, 3, 4],\n    'B': [5, 5, 6, 7, 7],\n    'C': [10, 10, 10, 11, 12]\n}\n\ndf = pd.DataFrame(data)\n\nmode_values = df.mode()\nprint(mode_values)\n\n     A  B     C\n0  2.0  5  10.0\n1  NaN  7   NaN\n\n\nExample 3:\nMode for All Columns:\n\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eli\", \"Fiona\"],\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Gender\": [\"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Female\"]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n      Name  Age  Gender\n0    Alice   24  Female\n1      Bob   30    Male\n2  Charlie   22    Male\n3    Diana   24  Female\n4      Eli   30    Male\n5    Fiona   24  Female\n\n\nMode of the \"Age\" column:\n\ndf[\"Age\"].mode()\n\n0    24\nName: Age, dtype: int64\n\n\n\n\n2.1.3 Median in R\nThe median is the middle value of a dataset when the numbers are sorted in order.\n\nIf the number of values is odd, it’s the middle one.\nIf it’s even, it’s the average of the two middle numbers.\n\nBasic median() function.\n\nx &lt;- c(10, 20, 30, 40, 50)\nmedian(x)\n\n[1] 30\n\n\nWith missing values (NA) we can use na.rm = TRUE\n\ny &lt;- c(5, 8, NA, 12)\nmedian(y, na.rm =TRUE)\n\n[1] 8\n\n\nUsing tapply with categorical variables in R\ntapply lets you apply a function (like median) to subsets of a vector, defined by a categorical variable (factor).\n\nAge &lt;- c(24, 30, 22, 24, 30, 24)\nGender &lt;- c(\"F\", \"M\", \"M\", \"F\", \"M\", \"F\")\n\ntapply(Age, Gender, median)\n\n F  M \n24 30 \n\n\nExplanation:\n\nFirst argument → numeric vector (Age)\nSecond argument → categorical variable (Gender)\nThird argument → function to apply (median)\n\nSo this gives you the median age for each gender.\nExample : DataFrame\n\ndata &lt;- data.frame(\n  Gender = c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"),\n  Anxiety = c(12, 15, NA, 20, 18, 25),\n  Depression = c(30, NA, 28, 35, 40, NA)\n)\n\ndata\n\n  Gender Anxiety Depression\n1      f      12         30\n2      f      15         NA\n3      m      NA         28\n4      m      20         35\n5      f      18         40\n6      m      25         NA\n\n\nUse sapply , lapply\n\nsapply(data[, c(\"Anxiety\",\"Depression\")], median, na.rm = TRUE)  #1\n\n   Anxiety Depression \n      18.0       32.5 \n\n#or\nsapply(data[sapply(data, is.numeric)], median, na.rm = TRUE)     #2\n\n   Anxiety Depression \n      18.0       32.5 \n\n#or\nlapply(data[, c(\"Anxiety\",\"Depression\")], median, na.rm = TRUE)  #3\n\n$Anxiety\n[1] 18\n\n$Depression\n[1] 32.5\n\n\nUse tapply\n\ntapply(data$Anxiety, data$Gender, median, na.rm = TRUE)\n\n   f    m \n15.0 22.5 \n\ntapply(data$Depression, data$Gender, median, na.rm = TRUE)\n\n   f    m \n35.0 31.5 \n\n\nUse aggregate\n\naggregate(cbind(Anxiety, Depression) ~ Gender, data = data, median,na.rm = TRUE)\n\n  Gender Anxiety Depression\n1      f      15         35\n2      m      20         35\n\n\n\n\n2.1.4 Median in Python\n1.Using the statistics library\n\nimport statistics\n\ndata = [10, 12, 15, 17, 18]\nmedian_value = statistics.median(data)\n\nprint(\"Median:\", median_value)\n\nMedian: 15\n\n\n2.Using the NumPy library\n\nimport numpy as np\n\ndata = [10, 12, 15, 17, 18]\nmedian_value = np.median(data)\n\nprint(\"Median:\", median_value)\n\nMedian: 15.0\n\n\n3.Using the Pandaslibrary to DataFrame\n\nimport pandas as pd\n\ndata = {\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Score\": [85, 90, 78, 92, 88, 95]\n}\n\ndf = pd.DataFrame(data)\n\nprint(\"Median Age:\", df[\"Age\"].median())\n\nMedian Age: 24.0\n\nprint(\"Median Score:\", df[\"Score\"].median())\n\nMedian Score: 89.0\n\n\nMedian in data with missing values ​​(NaN)\nSometimes data contains missing values. Pandas and NumPy can handle them easily:\n\nimport numpy as np\nimport pandas as pd\n\ndata = [10, 12, np.nan, 17, 18]\n\n# با NumPy\nprint(\"Median with NumPy:\", np.nanmedian(data))\n\nMedian with NumPy: 14.5\n\n# با Pandas\ns = pd.Series(data)\nprint(\"Median with Pandas:\", s.median())\n\nMedian with Pandas: 14.5\n\n\nExample :Data Frame (Numeric + Categorical)\n\nimport pandas as pd\nimport numpy as np\n\n# ساخت دیتافریم\ndata = {\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Score\": [85, np.nan, 78, 92, np.nan, 95],\n    \"Gender\": [\"F\", \"M\", \"M\", \"F\", \"M\", \"F\"]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n   Age  Score Gender\n0   24   85.0      F\n1   30    NaN      M\n2   22   78.0      M\n3   24   92.0      F\n4   30    NaN      M\n5   24   95.0      F\n\n\nCalculate the median for each column.\n\nmedians = df.median(numeric_only=True, skipna=True)\nprint(medians)\n\nAge      24.0\nScore    88.5\ndtype: float64\n\n\nCalculating the median by gender\n\ngroup_medians = df.groupby(\"Gender\").median(numeric_only=True)\nprint(group_medians)\n\n         Age  Score\nGender             \nF       24.0   92.0\nM       30.0   78.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "chapter1.html#mode-in-python",
    "href": "chapter1.html#mode-in-python",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.2 Mode in Python",
    "text": "2.2 Mode in Python\nCalculating the Mode in Python Using pandas\nUse .mode() to Find the Mode\nExaple 1:\n\nimport pandas as pd\n\ndata = pd.Series([1, 2, 2, 3, 4, 4, 5])\nmod = data.mode()\nprint(\"Mode:\", mod.tolist())\n\nMode: [2, 4]\n\n#or\n\nprint (mod)\n\n0    2\n1    4\ndtype: int64\n\n\nExample 2: Create a Sample Data Frame.\nMode for All Columns:\n\ndata = {\n    'A': [1, 2, 2, 3, 4],\n    'B': [5, 5, 6, 7, 7],\n    'C': [10, 10, 10, 11, 12]\n}\n\ndf = pd.DataFrame(data)\n\nmode_values = df.mode()\nprint(mode_values)\n\n     A  B     C\n0  2.0  5  10.0\n1  NaN  7   NaN\n\n\nExample 3:\nMode for All Columns:\n\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eli\", \"Fiona\"],\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Gender\": [\"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Female\"]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n      Name  Age  Gender\n0    Alice   24  Female\n1      Bob   30    Male\n2  Charlie   22    Male\n3    Diana   24  Female\n4      Eli   30    Male\n5    Fiona   24  Female\n\n\nMode of the \"Age\" column:\n\ndf[\"Age\"].mode()\n\n0    24\nName: Age, dtype: int64",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "chapter1.html#median-in-r",
    "href": "chapter1.html#median-in-r",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.3 Median in R",
    "text": "2.3 Median in R\nThe median is the middle value of a dataset when the numbers are sorted in order.\n\nIf the number of values is odd, it’s the middle one.\nIf it’s even, it’s the average of the two middle numbers.\n\nBasic median() function.\n\nx &lt;- c(10, 20, 30, 40, 50)\nmedian(x)\n\n[1] 30\n\n\nWith missing values (NA) we can use na.rm = TRUE\n\ny &lt;- c(5, 8, NA, 12)\nmedian(y, na.rm =TRUE)\n\n[1] 8\n\n\nUsing tapply with categorical variables in R\ntapply lets you apply a function (like median) to subsets of a vector, defined by a categorical variable (factor).\n\nAge &lt;- c(24, 30, 22, 24, 30, 24)\nGender &lt;- c(\"F\", \"M\", \"M\", \"F\", \"M\", \"F\")\n\ntapply(Age, Gender, median)\n\n F  M \n24 30 \n\n\nExplanation:\n\nFirst argument → numeric vector (Age)\nSecond argument → categorical variable (Gender)\nThird argument → function to apply (median)\n\nSo this gives you the median age for each gender.\nExample : DataFrame\n\ndata &lt;- data.frame(\n  Gender = c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"),\n  Anxiety = c(12, 15, NA, 20, 18, 25),\n  Depression = c(30, NA, 28, 35, 40, NA)\n)\n\ndata\n\n  Gender Anxiety Depression\n1      f      12         30\n2      f      15         NA\n3      m      NA         28\n4      m      20         35\n5      f      18         40\n6      m      25         NA\n\n\nUse sapply , lapply\n\nsapply(data[, c(\"Anxiety\",\"Depression\")], median, na.rm = TRUE)  #1\n\n   Anxiety Depression \n      18.0       32.5 \n\n#or\nsapply(data[sapply(data, is.numeric)], median, na.rm = TRUE)     #2\n\n   Anxiety Depression \n      18.0       32.5 \n\n#or\nlapply(data[, c(\"Anxiety\",\"Depression\")], median, na.rm = TRUE)  #3\n\n$Anxiety\n[1] 18\n\n$Depression\n[1] 32.5\n\n\nUse tapply\n\ntapply(data$Anxiety, data$Gender, median, na.rm = TRUE)\n\n   f    m \n15.0 22.5 \n\ntapply(data$Depression, data$Gender, median, na.rm = TRUE)\n\n   f    m \n35.0 31.5 \n\n\nUse aggregate\n\naggregate(cbind(Anxiety, Depression) ~ Gender, data = data, median,na.rm = TRUE)\n\n  Gender Anxiety Depression\n1      f      15         35\n2      m      20         35",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "chapter1.html#median-in-python",
    "href": "chapter1.html#median-in-python",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.4 Median in Python",
    "text": "2.4 Median in Python\n1.Using the statistics library\n\nimport statistics\n\ndata = [10, 12, 15, 17, 18]\nmedian_value = statistics.median(data)\n\nprint(\"Median:\", median_value)\n\nMedian: 15\n\n\n2.Using the NumPy library\n\nimport numpy as np\n\ndata = [10, 12, 15, 17, 18]\nmedian_value = np.median(data)\n\nprint(\"Median:\", median_value)\n\nMedian: 15.0\n\n\n3.Using the Pandaslibrary to DataFrame\n\nimport pandas as pd\n\ndata = {\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Score\": [85, 90, 78, 92, 88, 95]\n}\n\ndf = pd.DataFrame(data)\n\nprint(\"Median Age:\", df[\"Age\"].median())\n\nMedian Age: 24.0\n\nprint(\"Median Score:\", df[\"Score\"].median())\n\nMedian Score: 89.0\n\n\nMedian in data with missing values ​​(NaN)\nSometimes data contains missing values. Pandas and NumPy can handle them easily:\n\nimport numpy as np\nimport pandas as pd\n\ndata = [10, 12, np.nan, 17, 18]\n\n# با NumPy\nprint(\"Median with NumPy:\", np.nanmedian(data))\n\nMedian with NumPy: 14.5\n\n# با Pandas\ns = pd.Series(data)\nprint(\"Median with Pandas:\", s.median())\n\nMedian with Pandas: 14.5\n\n\nExample :Data Frame (Numeric + Categorical)\n\nimport pandas as pd\nimport numpy as np\n\n\ndata = {\n    \"Age\": [24, 30, 22, 24, 30, 24],\n    \"Score\": [85, np.nan, 78, 92, np.nan, 95],\n    \"Gender\": [\"F\", \"M\", \"M\", \"F\", \"M\", \"F\"]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n   Age  Score Gender\n0   24   85.0      F\n1   30    NaN      M\n2   22   78.0      M\n3   24   92.0      F\n4   30    NaN      M\n5   24   95.0      F\n\n\nCalculate the median for each column.\n\nmedians = df.median(numeric_only=True, skipna=True)\nprint(medians)\n\nAge      24.0\nScore    88.5\ndtype: float64\n\n\nCalculating the median by gender\n\ngroup_medians = df.groupby(\"Gender\").median(numeric_only=True)\nprint(group_medians)\n\n         Age  Score\nGender             \nF       24.0   92.0\nM       30.0   78.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  },
  {
    "objectID": "index.html#chapter1-measures-of-central-tendency",
    "href": "index.html#chapter1-measures-of-central-tendency",
    "title": "Statistics with R and Python",
    "section": "1.1 chapter1: Measures of central tendency",
    "text": "1.1 chapter1: Measures of central tendency",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Statistics with R and Python</span>"
    ]
  },
  {
    "objectID": "index.html#descriptive-statistics",
    "href": "index.html#descriptive-statistics",
    "title": "Statistics with R and Python",
    "section": "",
    "text": "0.1.1 chapter1: Measures of central tendency\n\n\n0.1.2 chapter2: Measures of variability",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Statistics with R and Python</span>"
    ]
  },
  {
    "objectID": "chapter1.html#mean-in-r",
    "href": "chapter1.html#mean-in-r",
    "title": "2  chapter1: Measures of central tendency",
    "section": "2.5 Mean in R",
    "text": "2.5 Mean in R\n\n2.5.1 Arithmetic Mean in R\nIn R, we use the mean() function to calculate the mean.\n\nanxiety_scores &lt;- c(12, 15, 20, 22, 18, 30, 25, 19, 17, 50)\nmean(anxiety_scores)\n\n[1] 22.8\n\n\nMean with missing data (NA) in R\nIf the data contains missing values ​​(NA), you must use the argument na.rm = TRUE\n\ndata &lt;- c(5, 10, NA, 20)\n\nmean(data, na.rm = TRUE)\n\n[1] 11.66667\n\n\ncategorical variables: tapply\nThe researcher wants to examine the average depression scores of two groups (men and women). To do this, we use tapply.\n\ngroup &lt;- c(\"f\",\"f\",\"f\",\"m\",\"m\",\"m\")\ndepression &lt;- c(18, 22, 20, 25, 30, 28)\n\ntapply(depression, group, mean)\n\n       f        m \n20.00000 27.66667 \n\n\nCalculating the mean in a Data Frame with missing data(NA)\nA researcher collected anxiety and depression scores from psychology students. Some students did not answer some questions, and the data is incomplete.\n\ndata &lt;- data.frame(\n  Gender = c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"),\n  Anxiety = c(12, 15, NA, 20, 18, 25),\n  Depression = c(30, NA, 28, 35, 40, NA)\n)\n\ndata\n\n  Gender Anxiety Depression\n1      f      12         30\n2      f      15         NA\n3      m      NA         28\n4      m      20         35\n5      f      18         40\n6      m      25         NA\n\n\nUse lapply , sapply\nMean of each column “Anxiety”,”Depression” (regardless of gender)\n\nsapply(data[, c(\"Anxiety\",\"Depression\")], mean, na.rm = TRUE)  #1\n\n   Anxiety Depression \n     18.00      33.25 \n\n#or\nsapply(data[sapply(data, is.numeric)], mean, na.rm = TRUE)     #2\n\n   Anxiety Depression \n     18.00      33.25 \n\n#or\nlapply(data[, c(\"Anxiety\",\"Depression\")], mean, na.rm = TRUE)  #3\n\n$Anxiety\n[1] 18\n\n$Depression\n[1] 33.25\n\n\nUse tapply\nMean anxiety and depression scores by gender\n\ntapply(data$Anxiety, data$Gender, mean, na.rm = TRUE)\n\n   f    m \n15.0 22.5 \n\ntapply(data$Depression, data$Gender, mean, na.rm = TRUE)\n\n   f    m \n35.0 31.5 \n\n\nUse aggregate\n\naggregate(cbind(Anxiety, Depression) ~ Gender, data = data, mean,na.rm = TRUE)\n\n  Gender Anxiety Depression\n1      f      15         35\n2      m      20         35\n\n\n\n\n2.5.2 Geometric Mean in R\nThis indicator is most often used when the data is a ratio or ratio, such as growth rates, investment returns, or population changes.\nMethod 1: Using the psych package\n\ninstall.packages(\"psych\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.5'\n(as 'lib' is unspecified)\n\nlibrary(psych)\n\nnumbers &lt;- c(4, 8, 16, 32)\n\ngeometric.mean(numbers)\n\n[1] 11.31371\n\n\nMethod 2: Using a formula (without a package)\n\nnumbers &lt;- c(4, 8, 16, 32)\n\ngm &lt;- exp(mean(log(numbers)))\n\nprint(gm)\n\n[1] 11.31371\n\n\nApplication of the geometric mean:\n\nEconomics: mean annual growth rate of an investment.\nMedical science: mean increase in bacterial population .\nManagement: mean annual sales growth percentage.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>chapter1: Measures of central tendency</span>"
    ]
  }
]