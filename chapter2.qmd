# chapter2: Measures of variability

**Variability is most commonly measured with the following descriptive statistics:**

-   Range: the difference between the highest and lowest values.

-   Interquartile range: the range of the middle half of a distribution.

-   Standard deviation: average distance from the mean.

-   Variance: average of squared distances from the mean.

## Range in R

To calculate the range, simply subtract the largest data value from the smallest value.

```{r}
x <- c(12, 15, 18, 25, 30, 35)

range_value <- max(x) - min(x)
range_value
```

**Using range() function**

```{r}
x <- c(12, 15, 18, 25, 30, 35)
range(x)
```

**Using range() function with `NA`**

```{r}
x <- c(10, 15, NA, 25, 30, NA, 40)

range(x, na.rm = TRUE)
```

**Range in DataFrame**

```{r}
df <- data.frame(
  A = c(10, 15, 20, 25, 30),
  B = c(5, 7, 9, 12, 15),
  C = c(100, 120, 110, 130, 125),
  Gender = c("m", "f", "f", "m", "f")
)

df
```

**Using: `sapply` Numeric column**

```{r}
range_df <- sapply(df[, sapply(df, is.numeric)], function(x) max(x) - min(x))
range_df
```

**`aggregate()`** Categorical variables

```{r}
aggregate(cbind(A, B, C) ~ Gender, data = df,
          FUN = function(x) max(x) - min(x))
```

**Range in DataFrame with `NA`**

```{r}
df <- data.frame(
  A = c(10, 15, 20, 25, 30),
  B = c(5, NA, 9, 12, 15),
  C = c(100, 120, 110, 130, NA),
  Gender = c("m", "f", "f", "m", "f")
)

df
```

In R, to handle missing data we need to put `na.rm = TRUE` inside the function:

```{r}
aggregate(cbind(A, B, C) ~ Gender, data = df,
          FUN = function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
```

## Range in Python

```{python}
data = [12, 15, 18, 25, 30, 35]

range_value = max(data) - min(data)
print(range_value)
```

**Range with missing data (`NA`) in Python**

```{python}
import pandas as pd

data = [10, 15, None, 25, 30, None, 40]
s = pd.Series(data)

range_value = s.max() - s.min()

print(range_value)
```

**Range with DataFrame (**Numeric columns**)**

```{python}
import pandas as pd

data = {
    "A": [10, 15, 20, 25, 30],
    "B": [5, 7, 9, 12, 15],
    "C": [100, 120, 110, 130, 140]
}
df = pd.DataFrame(data)

range_values = df.max() - df.min()
print(range_values)
```

Only for one column

```{python}
range_A = df["A"].max() - df["A"].min()
print(range_A)
```

**Range with DataFrame (**Numeric + Categorical**)**

```{python}
import pandas as pd

data = {
    "A": [10, 15, 20, 25, 30],
    "B": [5, 7, 9, 12, 15],
    "C": [100, 120, 110, 130, 140],
    "Gender": ["Male", "Female", "Male", "Female", "Male"]
}
df = pd.DataFrame(data)

range_values = df.select_dtypes(include="number").max() - df.select_dtypes(include="number").min()

print(range_values)
```

## **Deciles, Percentiles, and Quartiles in R**

### **1.Deciles in R**

Deciles divide the data into 10 equal groups (each 10%).

```{r}
data <- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)
quantile(data, probs = seq(0, 1,by = 0.1))
```

### 2. **Percentiles in R**

To calculate any percentile, use the same function with a decimal value.

**For exampl**e, the 25th percentile and the 90th percentile:

```{r}
data <- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)
quantile(data, probs = c(0.25, 0.9))

```

Or all percentiles (as a complete vector):

```{r}
data <- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)
quantile(data, probs = seq(0, 1, 0.01))
```

### 3. **Quartiles in R**

You can use the `quantile()` function to compute quartiles.

```{r}
data <- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)
quantile(data)

quantile(data, probs = c(0.25, 0.5, 0.75))
```

**Quartiles with `NA`**

`na.rm = TRUE`

```{r}
data <- c(12, 5, 7, NA, 15, 18, 22, NA, 30, 35, 40, 50)
quantile(data, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
```

If you want, without removing `NA` but replacing it with the `mean`.

```{r}
data <- c(12, 5, 7, NA, 15, 18, 22, NA, 30, 35, 40, 50)
data_filled <- ifelse(is.na(data), mean(data, na.rm = TRUE), data)
quantile(data_filled)
```

**DataFrame with `NA`**

Calculating quartiles for each column

```{r}
df <- data.frame(
  height = c(160, 165, 170, NA, 180, 190, NA),
  weight = c(50, 55, NA, 70, 80, 90, 95),
  age    = c(20, 25, 30, 35, NA, 45, 50)
)

sapply(df, function(x) quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE))
```

**for a column**

```{r}
quantile(df$weight, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
```

**DataFrame with Categorical variable**

```{r}
df <- data.frame(
  height = c(160, 165, 170, NA, 180, 190, NA),
  weight = c(50, 55, NA, 70, 80, 90, 95),
  age    = c(20, 25, 30, 35, NA, 45, 50),
  Gender = c('Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male')
)

quantile(df$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
quantile(df$weight, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
quantile(df$age,    probs = c(0.25, 0.5, 0.75), na.rm = TRUE)

```

**with `dplyr`**

```{r}
library(dplyr)

df %>%
  group_by(Gender) %>%
  summarise(
    height_Q1 = quantile(height, 0.25, na.rm = TRUE),
    height_Median = quantile(height, 0.5, na.rm = TRUE),
    height_Q3 = quantile(height, 0.75, na.rm = TRUE),
    
    weight_Q1 = quantile(weight, 0.25, na.rm = TRUE),
    weight_Median = quantile(weight, 0.5, na.rm = TRUE),
    weight_Q3 = quantile(weight, 0.75, na.rm = TRUE),
    
    age_Q1 = quantile(age, 0.25, na.rm = TRUE),
    age_Median = quantile(age, 0.5, na.rm = TRUE),
    age_Q3 = quantile(age, 0.75, na.rm = TRUE)
  )

```

**with `tapply`**

**By Gender variable**

```{r}
df <- data.frame(
  height = c(160, 165, 170, NA, 180, 190, NA),
  weight = c(50, 55, NA, 70, 80, 90, 95),
  age    = c(20, 25, 30, 35, NA, 45, 50),
  Gender = c('Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male')
)

tapply(df$height, df$Gender, function(x) quantile(x, probs = c(0.25,0.5,0.75), na.rm = TRUE))

```

## Interquartile Range in R - IQR() Function

the interquartile range is the difference between the upper quartile and the lower quartile.

```         
IQR=Q3−Q1
```

**`IQR()`** **Function**

```{r}
data <- c(12, 5, 7, 9, 15, 18, 22, 25, 30, 35, 40, 50)
IQR(data)
```

**Function `quantile()`**

```{r}
Q1 <- quantile(data, 0.25)
Q3 <- quantile(data, 0.75)
IQR <- Q3 - Q1
IQR
```

**DataFrame (Numeric)**

**`sapply`**

```{r}
df <- data.frame(
  height = c(160, 165, 170, 172, 180, 190),
  weight = c(50, 55, 60, 70, 80, 90)
)

sapply(df, IQR)
```

**DataFrame with `NA`**

```{r}
df <- data.frame(
  height = c(160, 165, 170, NA, 180, 190, NA),
  weight = c(50, 55, NA, 70, 80, 90, 95),
  age    = c(20, 25, 30, 35, NA, 45, 50)
)

sapply(df, IQR, na.rm = TRUE)
```

Just for weight

```{r}
IQR(df$weight, na.rm = TRUE)
```

**DataFrame (Numeric + Categorical) variable**

```{r}
df <- data.frame(
  gender = c("Male", "Female", "Male", "Female", "Male", "Female", "Male"),
  height = c(160, 165, 170, NA, 180, 190, NA),
  weight = c(50, 55, NA, 70, 80, 90, 95),
  age    = c(20, 25, 30, 35, NA, 45, 50)
)
df

by(df$weight, df$gender, function(x) quantile(x, probs = c(0.25, 0.5, 0.75), na.rm = TRUE))

```

```{r}
tapply(df$weight, df$gender, IQR, na.rm = TRUE)
```

If you want to calculate height, weight, and age all at once:

```{r}
library(dplyr)

df %>%
  group_by(gender) %>%
  summarise(
    IQR_height = IQR(height, na.rm = TRUE),
    IQR_weight = IQR(weight, na.rm = TRUE),
    IQR_age    = IQR(age, na.rm = TRUE)
  )
```
